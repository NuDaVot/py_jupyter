,NameCompany,Description,Raiting,DataPublish,Activity,TextArticle
0,red_mad_robot,,117.94,6 часов назад,№1 в разработке цифровых решений для бизнеса,"Старший iOS-разработчик red_mad_robot Аня Кочешкова рассказывает, чем отличаются три менеджера зависимостей, в каких случаях и для каких задач подойдёт тот или иной. Материал будет полезен джун-специалистам, которые только начали погружаться в разработку: специально для них подробно объясняем, что такое семантическое версионирование, как устроены модули кода и в чём разница между динамическими и статическими библиотеками. Что такое менеджер зависимостей и зачем он нужен В современной разработке зависимость — это написанный кем-то другим код, который используется в вашей программе. Добавление зависимости позволяет воспользоваться уже сделанной кем-то хорошей работой и избежать «изобретения велосипеда», а также лишних действий: проектирования, написания, тестирования, отладки и поддержки определённой логики. Такие «куски логики» называют пакетами, библиотеками или модулями. Чем сложнее проект, тем больше сторонних библиотек (правда, некоторые приложения могут вообще отказываться от их использования), а у этих библиотек много разных версий. Они могут ссылаться друг на друга и накладывать ограничения на эти версии. Эту работу можно проиллюстрировать таким бытовым примером. Чтобы телефон показал погоду на улице, не нужно встраивать в него термометр и вытаскивать за окно. В нём уже зашита специальная технология, которая позволяет ему связаться с «библиотекой», где хранятся данные гидрометцентра, которые, как и погода, всё время обновляются. Иногда с новой версией добавляется какая-нибудь новая функциональность. В примере с термометром библиотека с новой версией умеет ещё и выдавать карту дождей, а до этого могла показывать только температуру. Менеджеры зависимостей позволяют избежать долгого и муторного решения такого набора «уравнений» — то есть берут на себя часть работы, которую без них разработчик делал бы руками. Это система, которая позволяет управлять зависимостями в вашем проекте. А ещё у сторонних библиотек часто могут выходить новые версии с исправленными ошибками, и благодаря менеджеру зависимостей вам не нужно следить за их выходом — он всё обновит за вас. Предположим, вы решили подключить в ваш проект Firebase Crashlytics и GoogleUtilities. Обе эти библиотеки ссылаются на библиотеку PromisesObjC. Firebase хочет, чтобы она была любой версии, начинающейся с 2.1, а GoogleUtilities — чтобы она была от 1.2 до 3.0. Такое уравнение, конечно, можно решить вручную, но что делать, когда этих уравнений несколько десятков, а уровней зависимостей — два, три или больше? Для таких задач в распоряжении iOS-разработчика существуют три основных менеджера зависимостей: 1. Cocoapods. Пожалуй, самый распространённый сегодня, он требует лишь указывать список зависимостей в определённом формате в текстовом файле. 2. Carthage. Менее удобен в этом плане: вы также указываете список зависимостей в текстовом файле, но помимо этого нужно ещё немного «самостоятельной работы», о которой расскажем ниже. 3. SPM, или Swift Package Manager. Официальный менеджер зависимостей от Apple. Появился недавно, и многие команды переходят на него с Cocoapods. Позволяет управлять зависимостями как через графический, так и через текстовый интерфейс прямо из Xcode. Случается, что нужная библиотека не поддерживает необходимый менеджер зависимостей, потому что разработчики каждой библиотеки сами выбирают, какой менеджер поддержать. Поддержка каждого менеджера — это работа, которая занимает определённое время, поэтому часто выбирают работать только с самым популярным менеджером, Сocoapods. А если в проекте, например, SPM, а библиотека есть только в Cocoapods или просто нужна в одной конкретной версии, приходится добавлять вручную как framework / xcframework, о чём мы также поговорим позже. Но прежде чем начать говорить об управлении зависимостями, нужно разобрать несколько связанных с ним терминов. Фантастическое Semantic Versioning, и где оно обитает Semantic Versioning (SemVer) — это стандарт, который говорит о том, как работать с версиями пакетов/библиотек/приложений, — как их указывать и накладывать на них ограничения. Зачем накладывать ограничения? Возьмём такой пример. Разработчик создаёт приложение и использует некоторый набор библиотек для упрощения работы — например, библиотек для работы с сетью Alamofire. Допустим, начиная с определённой версии в библиотеке появляется поддержка какой-то новой функциональности, например Modern Concurrency. Эта функциональность доступна только начиная с определенной версии библиотеки. В таком случае от разработчика потребуется всего лишь поднять версию Alamofire в манифесте, где он описывает используемые библиотеки. Если начиная с какой-то версии библиотеки исправляется некий важный баг, но не сильно меняется функциональность самой библиотеки, то обновление до свежей исправленной версии произойдёт без лишнего вмешательства разработчика, в следующий раз при обновлении текущих библиотек проекта. Разберём, что такое SemVer, чтобы понимать формат версий, с которыми придётся работать, а также узнаем, как можно указать версию зависимости и наложить на неё ограничения. Этот набор правил — глобальный стандарт, который используется повсеместно, начиная от пакетов Node.js и заканчивая версиями приложений в App Store. По этому стандарту номер версии — это строка, которая состоит из чисел, разделённых точкой, и имеет формат A.B.C, где A — мажорная версия, B — минорная версия и C — патч-версия. Версии сравниваются слева направо, например: 1.0.0 < 2.0.0 < 2.1.0 < 2.1.1. Но зачастую мажорная версия увеличивается или при выпуске каких- либо масштабных фич, или при редизайне приложения, или просто при желании обозначить принципиальное обновление приложения/библиотеки. Синтаксис SemVer в Cocoapods, Carthage и SPM Cocoapods В Cocoapods можно указать одну из стратегий выбора версии: 1. Если необходима конкретная версия, просто укажите её без дополнительных символов, как есть: '5.0.0'. 2. Если необходима точная версия, но при этом вы также хотите обновляться, если придут исправления багов в патч-версии, используйте операнд ~>: '~> 5.0.0'. 3. Можно указывать неравенства: '> 5.0.0', '≥ 5.0.0' или '< 5.0.0', '≤ 5.0.0'. В этом случае Cocoapods обновит библиотеку до 5.0.1, 5.0.2 и т. д., но не возьмёт обновление 5.1.0, так как в нём уже повышена минорная, а не патч-версия. Если вы также хотите завязаться на минорную версию, достаточно просто указать '~> 5.0'. Carthage В Carthage используется тот же формат, что и в Cocoapods, с тем только исключением, что точная версия указывается через равенство: == 5.0.0. SPM SPM позволяет указать стратегию выбора версии прямо в интерфейсе, доступны следующие: Аналогичный синтаксис и у Package.swift файла. Модули — что к чему: библиотеки, фреймворки, XCFramework и Swift-пакеты Организация кода в iOS построена на понятии модулей. Модуль — это отдельный кусок кода или функциональности, который можно распространять разными способами и переиспользовать. Существует четыре вида модулей. Разберёмся, в чём разница: 1. Библиотека — это исполняемый код, скомпилированный под конкретную архитектуру. 2. Фреймворк — папка, содержащая в себе библиотеку и вспомогательные файлы. 3. XCFramework — набор фреймворков под разные архитектуры. 4. Swift-пакет — фреймворк, который используется для работы со Swift Package Manager. Если говорить на языке бытовых примеров, то код — это комната, а модули — разные предметы в ней. Торшер, например, позволяет включать и выключать свет, но как он работает внутри, мы не знаем. И этим торшером могут пользоваться в разных квартирах и комнатах разные люди. Библиотеки Библиотека — это исполняемый код, скомпилированный под конкретную архитектуру, например arm64. Архитектуры могут различаться для разных типов устройств и симуляторов: • iOS-устройства — архитектуры armv7, armv7s, arm64, • iOS-симулятор — архитектуры i386 и x86_64. Исходный код — текст программы, который написал разработчик. Исполняемый код — код, который получился в результате компиляции. Компилятор переводит исходный код в машинный, который сможет исполнить операционная система, — на выходе получается исполняемый код. Библиотеки бывают статическими и динамическими (об этом позже), и представляют собой один бинарный файл. Если представить, что библиотека — это настоящая библиотека со стеллажами, в которых хранятся книги, то эти книги — справочники о том, как что-то сделать (методы для выполнения разных задач). По сути, это скомпилированный набор объектных файлов, которые программа может использовать для выполнения любой задачи. То есть все файлы, которые библиотека собирается использовать, были скомпилированы до этапа компоновки. Фреймворки Фреймворк (.framework) представляет собой папку с файлами, в которой лежит сама библиотека, хедеры и ресурсы. Эта папка должна иметь определённую структуру, но нет нужды запоминать её, так как фреймворки, как правило, собираются самим Xcode. Поддержка фреймворков добавилась в iOS 8. Фреймворки служат той же цели, что и библиотеки, но могут включать в себя различные ресурсы — картинки, документацию, строковые файлы. Они также могут быть статическими или динамическими. Что использовать: фреймворк или библиотеку В чём же разница между фреймворком и библиотекой? И когда их использовать? Принципиальное различие — в архитектуре. XCFrameworks Для начала стоит рассказать, что такое fat-фреймворки. Это такие фреймворки, которые содержат библиотеки для разных архитектур и платформ, соединённые в одну. С появлением Xcode 11 на замену им пришли XCFrameworks, которые ввели структуру, позволяющую разнести библиотеки для разных платформ и архитектур по папкам. XCFramework — это, по сути, такой усовершенствованный fat- фреймворк. Он также содержит различные библиотеки для разных архитектур и платформ, но теперь нет необходимости трудиться над тем, чтобы объединить их в одну. В одном XCFramework может лежать несколько разных фреймворков — для iOS, macOS, tvOS, watchOS, а также для разных архитектур — armv7, x86_64 и т. д., каждый в своей папке. В каком-то смысле фреймворк — тоже разновидность библиотеки, а XCFramework — разновидность фреймворка, но всё же эти понятия принято разделять. Создатель зависимости сам выбирает, в каком виде её распространять. Нам важно понимать различие между этими видами, выбор можно сделать, только создавая свою библиотеку. Swift Package Swift-пакет используется для распространения только через SPM. Содержит исходный код, а также Package.swift файл, который описывает его конфигурацию. Доступен начиная со Swift 3. Static vs Dynamic Прежде чем начать, наконец, говорить об управлении зависимостями, важно разобраться, в чём различие между статическими и динамическими библиотеками и фреймворками. Первое, что здесь важно понимать: системные iOS- и macOS- библиотеки — динамические. Приложения могут хранить ссылку на библиотеку. Например, системная библиотека Foundation — динамическая. Она лежит на айфоне в единственном экземпляре, а все приложения лишь ссылаются на неё. Фреймворки, как и библиотеки, бывают динамические и статические и представляют собой обёртку библиотеки. Так, динамические библиотеки вне фреймворков не поддерживаются на iOS, watchOS и tvOS, и здесь важно отметить, что во всех дальнейших сравнениях, говоря «динамическая библиотека», мы будем иметь в виду её использование в рамках динамического фреймворка. Фреймворки в Cocoapods и Carthage Зависимости, распространяемые через Cocoapods, называются кокоаподами, или подами. До iOS 8 под представлял собой fat- статическую библиотеку. Есть специальная инструкция — по ней Cocoapods использует фреймворки вместо статичных библиотек, которые не поддерживались Swift до Xcode 9 и CocoaPods 1.5.0. Так что раньше эта директива была обязательна, сейчас — опциональна. Если нужно более быстрое время запуска, можно её убрать (см. предыдущий раздел). Carthage поддерживает только фреймворки. target 'TargetName' do   use_frameworks! end Три менеджера зависимостей: Cocoapods, Carthage, SPM Наконец, то, ради чего мы тут собрались, — менеджеры зависимостей. Посмотрим, какие они бывают, чем отличаются и как выбрать между ними. Cocoapods Это один из самых популярных сегодня менеджеров зависимостей. Позволяет указать список зависимостей в текстовом файле, а затем генерирует на основе его .xcworkspace, который будет содержать два проекта — ваш проект и проект с подами. Как правило, почти все библиотеки поддерживают Cocoapods, хотя с развитием SPM стали появляться и такие, которые поддерживают исключительно SPM (в основном это библиотеки Apple). В таком случае, если ваш менеджер зависимостей Cocoapods, единственный вариант воспользоваться библиотекой — вручную её собрать и прилинковать к проекту. Чтобы понять, поддерживает ли библиотека Cocoapods, достаточно заглянуть в readme, либо обратить внимание на наличие .podspec- файла в корне репозитория. Все библиотеки, опубликованные в Cocoapods, можно посмотреть на их официальном сайте. Cocoapods в вашем проекте Для понимания работы Cocoapods важны два термина — подфайл и спека. Подфайл описывает все зависимости приложения, а спека — библиотеку (её название и набор её зависимостей) для Cocoapods. Спеки хранятся в общем репозитории спек Cocoapods. Ещё их можно хранить в приватных репозиториях. Для описания конфигурации зависимостей используется подфайл. Этот файл написан на языке Ruby. 1. В файле опционально укажите источник спек. Источников может быть несколько, даже приватные. source 'https://github.com/CocoaPods/Specs.git' — официальный источник спек, который указан по умолчанию. source 'https://github.com/Artsy/Specs.gi — можно указать свои источники спек, в том числе приватные. 2. Укажите минимальную версию iOS: platform: ios, '9.0'. 3. Укажите таргет и набор зависимостей для него. Если таргетов несколько, укажите все, так как зависимости для них могут различаться. 4. Декларируйте зависимость. Первым идёт её официальное название (то самое, которое указано в спеке), затем версия. Используйте в названии правила из блока про SemVer. Есть и другие способы указать зависимости. Это может понадобиться в случаях, когда нужно использовать какую-то конкретную версию библиотеки. Например, из определённой ветки репозитория, где она хранится, или даже из определённого коммита. Либо указать путь локально, если есть только её файл.     target 'MyApp' do     pod 'GoogleAnalytics', '~> 3.1'     ...     end 1. Можно указать ресурс репозитория, с которого будем загружать библиотеку: pod 'CRToast', :git => 'https://github.com/akhatmullin/CRToast.git' 2. Можно указать нужную ветку в репозитории: pod 'CRToast', :git => 'https://github.com/akhatmullin/CRToast.git', :branch => 'dev' 3. Или тег: pod 'CRToast', :git => 'https://github.com/akhatmullin/CRToast.git', :tag => '0.7.0' 4. Или коммит: pod 'CRToast', :git => 'https://github.com/akhatmullin/CRToast.git', :commit => '082f8310af' 5. Можно указать на локальный под (путь должен вести на папку, где лежит .podspec): pod 'AFNetworking', :path => '~/Documents/AFNetworking' Рядом с подфайлом обычно лежит Podfile.lock. Этот файл описывает конечные версии зависимостей после их установки. Он обычно так же заливается в GitHub, как и сам Podfile, чтобы избежать ошибок и рассинхрона при установке зависимостей у разных разработчиков. Ещё он ускоряет выполнение pod install. Чтобы приступить к работе, запустите pod install. Можно выполнить pod update, если вы хотите обновить все библиотеки в проекте, иначе же будут использоваться фиксированные версии зависимостей из Podfile.lock. Как Cocoapods работает под капотом Pod install генерирует workspace — файл .xcworkspace, состоящий из двух проектов — проекта с вашим приложением и отдельного проекта, в котором хранятся зависимости (поды). Чтобы всё работало корректно, всегда открывайте workspace-файл. Если внимательнее посмотреть, что происходит, можно увидеть, что продукт этого проекта линкуется в основной проект: Также Cocoapods добавляет пару скриптов в Build Phases: Поддержка Cocoapods в вашей библиотеке Чтобы библиотека была доступна через Cocoapods, нужно сначала описать библиотеку или под при помощи спеки, собрать её и отправить спеку в приватный либо глобальный репозиторий Cocoapods. Разберёмся, как это сделать. 1. Создайте спеку и файл лицензии. Лицензию нужно добавлять для любой библиотеки, и чаще всего используется лицензия MIT — самая популярная лицензия для программ с открытым исходным кодом. Её текст можно найти в интернете. Здесь нужно описать вашу библиотеку. Файл принято форматировать так, чтобы вторая часть строки была выровнена.     Pod::Spec.new do |spec|     # Название библиотеки. Именно его будут указывать разработчики в своих      spec.name                    = 'NAME'      # Версия     spec.version                 = '1.2.1'      # Описание     spec.summary                 = 'Describe your framework.'     # Здесь можно указать путь на вебсайт или просто GitHub-репозиторий     spec.homepage                = 'https://xxx'      # Путь к лицензии. Да, её тоже нужно создать     spec.license                 = { type: 'MIT', file: 'LICENSE' }      # Автор библиотеки     spec.author                  = { ""Your Name"" => 'your-email@example.com     # Путь к исходным файлам (чаще всего это ваш репозитоий)     spec.source                  = { :git => 'https://github.com/path-to-re     # Минимальная поддерживаемая версия iOS и Swift     spec.ios.deployment_target   = '13.0'      spec.swift_version           = '5.0'     # Если библиотека использует локальный фреймворк, его нужно указать      spec.vendored_frameworks     = 'Path/To/Files/NameOfVendor.xcframework' 2. Проверьте, что всё корректно. Следующая команда валидирует спеку — проверяет, что она не имеет ошибок, а проект билдится — pod lib lint. 3. Отправьте спеку в репозиторий спек. Как правило, это делается уже на финальном этапе разработки — после того, как прошла проверка и вы готовы публиковать работу, — pod trunk push NAME.podspec. Carthage     # Указываем вайлдкард-пути к файлам, которые необходимо включить     spec.source_files            = 'Path/To/Files/**/*.{swift}'      # Путь к ресурсам     spec.resources               = 'Path/To/Files/Resources/**/*.{strings}'     # Укажите здесь все ассеты, которые вам нужны, включая .xib-файлы     spec.resource_bundles        = {'BundleName' => ['Path/To/Files/Resourc     # Указываем зависимости     spec.dependency           ""Alamofire"", ""~> 5.0.0""      # И системные зависимости     spec.frameworks           = 'Foundation'      spec.ios.frameworks       = 'UIKit'     end Carthagе — это децентрализованный менеджер зависимостей, которые не нужно «поддерживать» разработчику. Carthage сам выкачивает библиотеку из репозитория, компилирует её и предоставляет в готовом виде. Поэтому, если хотите использовать Carthage, не нужно искать в репозитории с библиотекой определённые инструкции или слова о том, что он поддерживается, — просто попробуйте. Нет у Carthage и централизованного источника, как у Cocoapods. Этим источником, по сути, является сам GitHub. Конечно, этого не всегда бывает достаточно. Некоторые библиотеки Carthage просто не может «переварить» — что-то не собирается, а что-то отваливается. Задача разработчика — проверить, всё ли работает корректно. Наконец, Carthage может автоматически подхватить уже собранный фреймворк, если он прикреплён к соответствующему релизу на GitHub. Carthage в вашем проекте Зависимости в Carthage описываются в текстовом файле Cartfile. Он очень похож на Podfile, только гораздо проще по структуре. Мы указываем источник, имя зависимости и версию. 1. Источник зависимости. Как правило, GitHub, либо git для универсальных репозиториев Git, размещённых в другом месте. Ключевое слово git сопровождается путём к репозиторию, будь то удалённый URL-адрес, используя git://, http://, или ssh://, или локальный — путём к репозиторию git на компьютере разработчика. 2. Название. Через слеш указывается владелец и название репозитория, которые можно подсмотреть в ссылке на репозиторий. 3. Версия. Особенности указания версий мы уже рассмотрели в блоке про семантическое версионирование, но можно также указывать и ветки. Примеры: 1. Версия — github ""Alamofire/Alamofire"" == 2.0 2. Ветка — github ""username/project"" ""branch"" 3. Локальный проект — git ""file:///directory/to/project"" ""branch"" 4. Бинарник (путь указывается в json) — binary ""https://my.domain.com/release/MyFramework.json"" ~> 2.3 После описания зависимостей потребуется ещё несколько дополнительных шагов. 1. Вызовите carthage update. Carthage склонирует репозитории с указанных в Cartfile путей и затем сбилдит для каждой зависимости фреймворк. После окончания работы вы увидите несколько файлов и каталогов: 2. Полученные фреймворки затем вручную перетащите из папки Build в проект в секцию Frameworks, Libraries и Embedded Content. 3. Carthage требует добавления нового скрипта в Build Phases в качестве workaround бага Apple. Это позволяет dSYM- файлам корректно подтягиваться при архивации. 4. Перейдите в Build Phases и добавьте новый Run Script. Добавьте следующую команду: /usr/local/bin/carthage copy- frameworks. 5. Нажмите на плюс под Input Files и добавьте запись для каждой платформы: $(SRCROOT)/Carthage/Build/iOS/Alamofire.framework. Как Carthage работает под капотом Как и в случае с Cocoapods, создаётся лок-файл Cartfile.resolved, который фиксирует конечные версии зависимостей. Каталог Carthage содержит два подкаталога: 1. Build. Содержит собранный фреймворк для каждой зависимости. 2. Checkouts. Содержит клонированные исходники, которые Carthage потом компилирует. Это своего рода кэш, который ускоряет работу. Поддержка Carthage в вашей библиотеке Для поддержки Carthage достаточно сделать релиз на GitHub. Но никогда не помешает проверить, всё ли билдится корректно в вашем случае и, если есть какие-то проблемы, решить их. Для этого, выполните carthage build --no-skip-current. Carthage попытается сбилдить ваш проект и создаст в нём папку Carthage. Также стоит обратить внимание, что он видит только те схемы, которые помечены в проекте как Shared. SPM Или Swift Package Manager — официальный менеджер зависимостей от Apple. Работа с ним происходит прямо в Xcode, а .Xcodeproj файлы больше не нужны (хотя при желании есть возможность сгенерировать файл проекта из SPM-пакета). Если заглянуть в репозиторий библиотеки, то первое, что будет говорить о поддержке SPM, — это наличие Package.swift-файла. SPM в вашем проекте Добавление зависимостей в проект происходит в секции Package Dependencies. 1. Для начала выберите File > Swift Packages > Add package dependecy. 2. Найдите модуль по поиску, либо введите URL репозитория. 3. Укажите версию: Как и во всех предыдущих случаях, SPM создает Package.resolved, назначение которого то же, что и у других менеджеров зависимостей. В меню File > Swift Packages доступно несколько действий: • Reset Package Caches удаляет кэши из Derived Data. • Resolve Package Versions резолвит версии зависимостей. Создаёт Package.resolved, если его не существует, но не меняет его, если он уже есть. Может потребоваться, если Package.resolved был, например, обновлён извне. • Update to Latest Packages Versions обновляет версии пакетов, может модифицировать Package.resolved. Поддержка SPM в вашей библиотеке Если вы разрабатываете библиотеку и хотите распространять её через SPM, нужно будет создать Package.swift файл. Таким образом может быть сконфигурирован и обычный проект, что позволяет отойти от использования project-файлов. Конфигурация через SPM выглядит чище и более проста для понимания и редактирования, чем стандартные project-файлы, которые зачастую нечитаемы. Если вы пишете библиотеку и хотите распространять её через SPM, обязательно убедитесь, что потенциальные потребители библиотеки не используют Cocoapods. Одновременная поддержка Cocoapods и SPM — часто непростая задача. import PackageDescription   let package = Package(     // Название нашего пакета     name: ""Resources"",     // Платформы, которые поддерживаются нашим пакетом     platforms: [         .iOS(.v11),     ],     // То, что будут использовать сторонние приложения     products: [         .library(             name: ""Resources"",             // Динамический или статический продукт             // по дефолту значение nil - SPM сам будет понимать, что лучше              // преференция, скорее всего, будет отдаваться .static             type: .dynamic,             targets: [""Resources""]),     ],         // Зависимости, необходимые для работы нашего пакета,   // здесь они просто загружаются, добавляются они в targets     dependencies: [         // Название пакета, путь к нему и источник (ветка, версия, локальны         .package(             name: ""R.swift.Library"",              url: ""https://github.com/mac-cain13/R.swift.Library"",              branch: ""master""),         .package(             name: ""SVGKit"",             url: ""https://github.com/SVGKit/SVGKit.git"", И как выбрать подходящий менеджер             .upToNextMajor(from: ""3.0.0"")),         .package(             name: ""PhoneNumberKit"",             url: ""https://github.com/marmelroy/PhoneNumberKit"",             from: ""3.3.4""),         // Пример подключения локального пакета         .package(path: ""../Core"")     ],     targets: [         // Это то, из чего мы будем складывать наш продукт         .target(             name: ""Resources"",             dependencies: [                 // Здесь мы указываем зависимости, которые мы хотим использ                 .product(name: ""RswiftDynamic"", package: ""R.swift.Library"")             ],             resources: [                 // Все ресурсы, которые мы хотим использовать, нужно явно у                 // Путь к ним относительный от Sources/имя_пакета/то_что_мы                 .process(""Resources"")             ])     ] ) Универсального ответа нет — выбор менеджера зависимостей зависит исключительно от нужд и особенностей вашего проекта. SPM чаще всего не будут поддерживать старые библиотеки, в то время как Cocoapods вполне могут не поддерживать новые (хотя это и большая редкость, чем первое). Carthage в этом плане может показаться универсальнее. Хоть он более громоздкий и сложный во взаимодействии, но он единственный разделяет шаги управления зависимостями и добавления их в проект. Это даёт контроль над ситуацией и ускоряет разработку — не будет лишних пересборок или заморозки интерфейса, потому что нужно зарезолвить зависимости. Над материалом работали: • текст — Аня Кочешкова, Ника Черникова, • редактура — Виталик Балашов, • иллюстрации — Юля Ефимова. Делимся железной экспертизой от практик в нашем телеграм-канале red_mad_dev. А полезные видео складываем на одноимённом YouTube-канале. Присоединяйся! Теги:   red_mad_robot , ios , cocoapods , carthage , spm , swift package manager , зависимости , управление зависимостями Хабы:   Блог компании red_mad_robot , Разработка под iOS +1 3 1 red_mad_robot №1 в разработке цифровых решений для бизнеса 57 Карма 13 Рейтинг @redmadrobot Пользователь Комментарии 1 Публикации ЛУЧШИЕ ЗА СУТКИ  ПОХОЖИЕ  ·   ·   ·   ·   ·   ·   ·   ·   ·   ·  Ваш аккаунт Войти Регистрация Разделы Публикации Новости Хабы Компании Авторы Песочница Информация Устройство сайта Для авторов Для компаний Документы Соглашение Конфиденциальность Услуги Корпоративный блог Медийная реклама Нативные проекты Образовательные программы Стартапам Мегапроекты ИНФОРМАЦИЯ Сайт redmadrobot.ru Дата регистрации 16 августа 2009 Дата основания 16 ноября 2008 Численность 1 001–5 000 человек Местоположение Россия Настройка языка Техническая поддержка Вернуться на старую версию © 2006–2023, Habr "
1,Cloud4Y,,71.07,5 часов назад,#1 Корпоративный облачный провайдер,"Взлом Instagram*‑аккаунта — популярный запрос в поисковиках. Поэтому есть смысл рассказатьо том, как это обычно работает. Просто для того, чтобы вы знали, откуда может пойти атака. Cloud4Y 5 часов назадOSINT & Hacking — как работает фишинг для нельзяграма Простой 3 мин 1.1KБлог компании Cloud4Y , Информационная безопасность *, Социальные сети и сообществаОбзор ПереводКАК СТАТЬ АВТОРОМЧтобы начать попытки заполучить доступ к аккаунту, вы должны знать ник человека, которого вы пытаетесь взломать. Так что небольшая разведка будет очень кстати. Только не увлекайтесь. Существуют различные инструменты для разведки, в первую очередь, поиск пользователя в конкретной соцсети с целью узнать его ник. Я нашёл отличный инструмент под названием «Slash», который можно использовать для поиска любых учётных записей пользователя, если он везде регистрируется под одним ником. Ставим Slash git clone https://github.com/theahmadov/slash  cd slash  pip install -r requirements.txt  python slash.py help Я проверил Slash на себе, и посмотрите на эти результаты. Некоторые из учетных записей, перечисленных здесь, были созданы много лет назад. Slash — это простой консольный инструмент. Но вы также можете использовать такие инструменты, как WhatsMyName Web, который совершенно бесплатен. Вот, посмотрите. Я проверил WhatsMyName на себе. Мой ник «earthtoyash». Теперь, когда мы знаем больше о нашем пользователе, можно использовать эти знания. Например, через отправку фишинговых ссылок. Для этого создадим полезную нагрузку с помощью Zphisher. Ставим Zphisher с GitHub Клонируем репозиторий: git clone --depth=1 https://github.com/htr-tech/zphisher.git Запускаем файл zphisher.sh: cd zphisher && ./zphisher.sh При первом запуске он установит зависимости и на этом всё. Система скажет, что Zphisher установлен. После установки вам нужно будет снова запустить zphisher.sh в каталоге zphisher командой ./zphisher , и тогда вы получите что-то вроде этого: Как вы можете видеть, есть много вариантов и шаблонов, благодаря чему любой может заниматься фишингом. Мы сосредоточимся на нельзяграме. Итак, введите «2» и нажмите Enter. Следующий шаг полностью зависит от вас, выберите любой из них. Затем появится окно с выбором. Я выбрал третий вариант, так как он минималистичный и удобен для того, чтобы показать возможности инструмента. Опять же, чтобы все было просто, я пропущу пользовательский порт, но если вы уже используете порт 8080, то можете изменить его на 8000. Если нет, оставляйте всё как есть. Также важно маскировать URL, ну просто в целях безопасности. Можно использовать что‑то вроде этого: Всё, Zphisher создал фишинговую ссылку, которую можно отправить жертве. Как только она нажмёт на ссылку, вы начнёте получать информацию о ней. Например, IP‑адреса, имена пользователей, пароли и т. д. Ещё можно использовать обратный поиск IP, чтобы определить местоположение вашей цели и многое другое. Итак, вот эти фишинговые ссылки. При нажатии открывается страница, похожая на официальную страницу входа в запрещённую соцсеть. Вот она, нехорошая После ввода учётных данных можно получить много информации на «хакерской» стороне терминала. Вот так, господа и дамы, можно без особого труда взломать учетную запись в нельзяграме. Поэтому в очередной раз напоминаем: нельзя нажимать на ссылки, которым вы не доверяете. Само собой разумеется, не используйте информацию из этой статьи с намерением причинить кому-либо вред. OSINT законен, но фишинг и кража личных данных даже в запрещённой соцсети является уголовным преступлением. И да, * Организация Meta, а также её продукт Instagram, на которые мы ссылаемся в этой статье, признаны экстремистскими и запрещены на территории РФ. Спасибо за внимание! Cloud4Y #1 Корпоративный облачный провайдер Сайт Facebook Twitter ВКонтакте Telegram Что ещё интересного есть в блоге Cloud4Y → Информационная безопасность и глупость: необычные примеры → NAS за шапку сухарей → Взлом Hyundai Tucson, часть 1, часть 2 → Столетний язык программирования — какой он → 50 самых интересных клавиатур из частной коллекции Теги:  взлом, соцсети, osint Хабы:  Блог компании Cloud4Y, Информационная безопасность,  Социальные сети и сообщества  0  19  1 149 Карма 53.5 Рейтинг Cloud4Y @Cloud4Y Корпоративный облачный провайдер Сайт ВКонтакте Telegram  Комментарии 1 Публикации ЛУЧШИЕ ЗА СУТКИ ПОХОЖИЕ  ·   ·   ·   ·   ·   ·   ·   ·   ·   ·  И Н Ф О Р М А Ц И Я Сайт www.cloud4y.ru Ваш аккаунт Войти Регистрация Разделы Публикации Новости Хабы Компании Авторы Песочница Дата регистрации 29 июля 2011 Дата основания 2009 Численность 51–100 человек Местоположение Россия Представитель Информация Устройство сайта Для авторов Для компаний Документы Соглашение Конфиденциальность Услуги Корпоративный блог Медийная реклама Нативные проекты Образовательные программы Стартапам Мегапроекты Настройка языка Техническая поддержка Вернуться на старую версию © 2006–2023, Habr "
2,Southbridge,,280.79,2 часа назад,Обеспечиваем стабильную работу highload-проектов,"Перевели статью о создании пайплайна для развертываниястатического веб-сайта на AWS S3 Bucket на примере GitlabCI/CD, чтобы быстро вникнуть в основы технологии и начатьприменять ее в работе. В статье рассматриваются базовыеконцепции CI и CD, а также этапы CI/CD-пайплайна. 2 часа назад5 минzubarekБыстрое начало работы с Gitlab CI/CD:пайплайн для веб-сайта на AWS S3 Bucket362Блог компании Southbridge, Тестирование IT-систем*, Системное администрирование*, ПрограммированиеТуториалПереводКАК СТАТЬ АВТОРОМОт автора Мне повезло быть частью некоторых профессиональных команд, каждая из которых применяла несколько DevOps практик. И меня поразило то, как качество кода, скорость разработки и позитивный настрой команды коррелируют с CI/CD-пайплайном. По моему мнению, зрелость пайплайна может служить прекрасным показателем опытности разработчика, качества кода и эффективности всей команды. Во многих случаях, которые я наблюдал, пайплайны были выстроены либо DevOps-инженером, либо отдельной DevOps- командой. Да и последний отчет State of CD 2022 продемонстрировал, что только 22% разработчиков создают пайплайны. Моя цель — увеличить это число: помочь разработчикам взять на себя ответственность за пайплайны, выстраивать непрерывный процесс доставки и создавать качественный код. В статье рассматриваются фундаментальные концепции CI и CD. Что такое CI/CD? Многие бизнесы применяют фреймворки Agile, так как они позволяют менять приоритеты и повышать скорость доставки. Кроме всего прочего, такой подход улучшает атмосферу в команде и помогает увеличить прибыль. Если ваша компания следует по пути Agile, то принятие культуры, философии и практик DevOps станет ее большим преимуществом. Модное словечко последних десятилетий, DevOps сегодня считается настоящим стандартом индустрии. CI/CD — это практика DevOps, которая помогает разработчикам ПО доставлять изменения в коде с высокой частотой и надежностью. «Быстрый билд, быстрый тест, быстрый фейл» При наличии автоматизированных тестов команды тяготеют к общей автоматизации задач и частым, надежным поставкам кода. Создание CI/CD-пайплайна в этом случае может привести к нескольким преимуществам. Бизнес выигрывает от снижения затрат и повышения производительности, ускорения Time to Market и адаптации к изменяющимся требованиям рынка. Команда выигрывает от быстрой обратной связи, улучшения эффективности разработки, уменьшения количества бутылочных горлышек и повышения уровня вовлеченности и удовлетворенности сотрудников. Фазы CI и CD CI — непрерывная интеграция. Непрерывная интеграция позволяет по много раз в день коммитить изменения в основную ветку вашей кодовой базы. Учитывая ограниченные когнитивные способности человека, CI стимулирует разработчиков вносить в код небольшие изменения, которые легче рассмотреть, покрыть автоматическими тестами и часто релизить. Это позволяет избежать напряженных и переполненных merge conflict-ами дней подготовки к релизу с тоннами ручного тестирования. CD — непрерывная доставка. Следующий шаг после CI позволяет гарантировать, что кодовая база постоянно готова к деплою, а задеплоить ее можно одним нажатием кнопки. При этом неважно, с чем вы работаете: с масштабной распределенной системой, сложной производственной средой и т. д. Ключевой момент — автоматизация. CD — непрерывное развертывание. Последний этап зрелого CI/CD-пайплайна, где все изменения в коде автоматически развертываются в продакшн без ручного вмешательства. Само собой, для этого требуется большое количество хорошо продуманных автоматических тестов. State of CD 2022 утверждает, что «47% разработчиков применяют CI или СD, но только один из пяти использует оба подхода для автоматизации сборки, тестирования и развертывания кода». Книга Accelerate подводит итоги многолетнего исследования с использованием отчетов State of DevOps, основанных на 23 000 наборов данных компаний по всему миру. Как видите, высокопроизводительные команды могут деплоить по требованию (или несколько раз в день). Этапы CI/CD-пайплайна Стадия исходного кода — здесь запускается пайплайн. Обычно это происходит после изменений в Git-репозитории, которые проявляются в открытии нового Pull Request-а или в пуше в ветку. Другой способ заключается в настройке инструментария CI/CD для запуска пайплайна через автоматическое расписание или после запуска другого пайплайна. Стадия сборки — этап, в процессе которого происходит проверка и сборка кода. Здесь особенно полезны такие инструменты, как Docker: они обеспечивают однородную среду. Стадия тестирования — CI/CD невозможно представить без автоматизированных тестов. В конце концов, все хотят быть уверены, что изменения в коде не сломают продакшн. Стадия развертывания — на последнем этапе (после успешного прохождения всех предыдущих стадий) код можно развернуть в выбранной среде. Пример с Gitlab В этом примере будет использован Gitlab CI/CD, однако концепции аналогичны и для остальных инструментов, поэтому их можно применить к другим сервисам хостинга репозиториев. Существует несколько инструментов CI/CD, например всемирно известный Jenkins. Этот инструмент требует некоторой настройки и конфигурации, в то время как другие поставляются сервисами хостинга репозиториев (такими как GitHub Actions и Bitbucket Pipelines) с предварительной настройкой. Поэтому если ваш код размещен на Gitlab, то легче всего использовать Gitlab CI/CD, поскольку код и управление CI/CD находятся на одной платформе. Как все это может работать без настроек? Для ответа на этот вопрос стоит немного погрузиться в архитектуру Gitlab, а именно — в инстансы и раннеры. Инстансы хранят код приложения и конфигурации пайплайна. Раннеры выступают в качестве агентов, выполняющих операции в пайплайнах. В Gitlab каждый инстанс может быть подключен к одному или нескольким раннерам. Gitlab.com — это управляемый инстанс с несколькими раннерами, которые сам Gitlab и поддерживает. Следовательно, если вы используете этот инстанс, то получаете все необходимое из коробки. Приступим к работе Gitlab предлагает несколько шаблонов при создании нового проекта. Конфигурация пайплайна Gitlab CI/CD по умолчанию находится в файле .gitlab-ci.yml в корневом каталоге. Предположим, мы хотим создать простой пайплайн, который проверяет: написан, протестирован и развернут ли код. Вот несколько концепций и терминов для ознакомления перед началом работы. Пайплайн (Pipeline) Пайплайн — это набор заданий, разделенных на этапы. Gitlab предлагает различные типы пайплайнов, например parent-child или multi-project. Полный список см. здесь. Этап (Stage) Этап — это шаг в пайплайне, предоставляющий информацию о том, какие задания запускать (сборка, тестирование и т. д.). Один этап может включать одно или несколько заданий. Задание (Job) Задание — основной блок пайплайна (компиляция, линтинг и т. д.). Для каждого задания должны быть определены name и script. После выполнения всех заданий на этапе пайплайн переходит к следующему. Теперь — к коду Выстраиваем пайплайн Gitlab CI/CD, который собирает, тестирует и разворачивает статический веб-сайт в AWS S3 Bucket. Для начала создадим новый .gitlab-ci.yml 1. Определим переменные 2. Определим этапы 3. Определим задания на каждом этапе variables: # variabiles definitions for easier reuse of values.  CI_NODE_IMAGE: ""node:16.13.2"" # Pipeline stages stages:  - install  - build  - test  - deploy #install job definition install:  stage: install  image: ""$CI_NODE_IMAGE"" # variable reference  script: # Shell script that is executed by the runner.    - npm ci  cache: # List of files that should be cached between subsequent runs.    key:      files:        - package.json        - package-lock.json    paths: # directories to cache      - node_modules # Build Job definition На этом все, спасибо за внимание. Научиться работать с пайплайнами, билдами и артефактами можно на курсе Gitlab CI/CD в Слёрм. Вы узнаете, из чего состоит Gitlab и какие у него возможности и настройки, а также разберете лучшие практики построения пайплайна, особенности шаблонизации и работы с переменными. build:  stage: build  image: $CI_NODE_IMAGE  script:    - npm run build  artifacts: # list of files and directories that are attached to the job    paths:      - dist/  cache:    key:      files:        - package.json        - package-lock.json    paths:      - node_modules    policy: pull # Test Job definition test:  stage: test  image: $CI_NODE_IMAGE  script:    - npm run test # Deploy Job definition deploy:  stage: deploy  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest # a Doc  script:    - aws s3 cp --recursive dist s3://bucket-name # copies the dist folder t Southbridge Обеспечиваем стабильную работу highload-проектов Сайт Сайт 14 Карма 16.9 Рейтинг Лиза Зубарькова @zubarek Пользователь Комментировать Публикации Видеокурс доступен всегда. Посмотреть программу: https://slurm.club/3JUKdzT Теги:   ci/cd , gitlab-ci , aws , gitlab , pipeline Хабы:   Блог компании Southbridge , Тестирование IT-систем , Системное администрирование , Программирование , DevOps +7 14 0 ЛУЧШИЕ ЗА СУТКИ  ПОХОЖИЕ Ваш аккаунт Разделы Информация Услуги  ·   ·   ·   ·   ·   ·   ·   ·   ·   ·  ИНФОРМАЦИЯ Сайт southbridge.io Дата регистрации 15 ноября 2012 Дата основания 22 февраля 2008 Численность 51–100 человек Местоположение Россия Представитель Антон Скобин Войти Регистрация Публикации Новости Хабы Компании Авторы Песочница Устройство сайта Для авторов Для компаний Документы Соглашение Конфиденциальность Корпоративный блог Медийная реклама Нативные проекты Образовательные программы Стартапам Мегапроекты Настройка языка Техническая поддержка Вернуться на старую версию © 2006–2023, Habr "
3,getmatch,,414.35,4 часа назад,"Рассказываем о том, как строить карьеру в IT","Весь интернет уже готовится к выходу Windows 12. Вероятно,следующая версия будет во многом сосредоточена на поддержкеработы с ИИ. На это намекает в том числе недавняя утечка от Intel, а 4 часа назад5 минArnakНовые утечки. Что мы знаем о выходеWindows 126.3KБлог компании getmatch, Разработка под Windows*, Софт, Искусственный интеллектКАК СТАТЬ АВТОРОМтакже последние действия AMD и направление развития Bing. Мы знаем, что и Intel, и Microsoft готовятся к поддержке работы Windows 12 на новых процессорах. Об этом нам говорит утечка от leaf_hobby, который известен тем, что раскрывает полные спецификации чипов Intel Xeon перед их запуском. На этот раз leaf_hobby опубликовали подробности аппаратных показателей десктопной платформы Intel Meteor Lake, которую планируется выпустить в этом или в следующем году. Сейчас их твиты уже защищены, но интернет помнит™, а у журналистов отдельных изданий, вроде Insider и The Verge, к ним есть доступ. Сообщается, что Intel в имейле для своих сотрудников упоминает, что ее процессоры следующего поколения будут поддерживать Windows 12. Для этого Meteor Lake должен содержать 20 линий PCIe Gen5. Хотя Microsoft не объявляла о каких-либо планах в отношении Windows 12, уже есть признаки того, что компания планирует будущие версии Windows с расчетом на глубокую интеграцию функций ИИ. Даже последнее обновление Windows 11 уже интегрирует новую версию Bing с искусственным интеллектом прямо в панель задач. А ещё в этом обновлении бизнес-пользователи получают рекомендованный ИИ контент в меню «Пуск». Скоро искусственный интеллект придет в Edge, а потом — и во все остальные аспекты продуктов Microsoft. Компания очень воодушевлена успехом своей инвестиции в ChatGPT, и собирается сделать на него очень сильную ставку в надежде победить конкурентов, в том числе Google, у которой дело с инвестициями в ИИ пошло не так хорошо. Один из слайдов от Intel В начале января руководитель разработки Windows Паноса Паная на CES заявил, что «ИИ собирается заново переизобрести всё то, что вы делаете в Windows». Команда Microsoft Surface также сообщила, что «ИИ изменит то, как мы используем ПК». Всё однозначно указывает на то, что в следующей версии Windows компания собирается очень широко использовать ИИ. Это будет главная новая «фишка» платформы. А чтобы всё это могло работать, Microsoft приходится тесно сотрудничать с партнерами по аппаратному обеспечению, такими как Intel и AMD. Ей нужно, чтобы новые процессоры смогли справляться с высокими рабочими нагрузками ИИ, и без ошибок работали с новой технологией. Это объясняет то, почему Intel, как сообщается, уже упоминает об оптимизации под Windows 12 внутри компании. AMD недавно выпустила свои мобильные процессоры Ryzen 7000, и похвасталась тем, что они являются первыми процессорами x86, содержащими специальный механизм искусственного интеллекта, способный поддерживать эффекты Windows Studio. Эти функции, в том числе удаление фонового шума, размытие фона и автоматическое кадрирование, будут доступны только для техники с ускорителями на чипах ARM, которые работают с помощью специального нейронного процессора (NPU). То есть, AMD и Microsoft сейчас тоже активно совместно работают над внедрением расширенного числа функций на основе ИИ в свои продукты. И такие возможности, как заявляют компании, в дальнейшем будут более широко доступны в традиционных ноутбуках с Windows, работающих на AMD. Возможно, это тоже является подготовкой новых поколений процессоров к запуску с Windows 12. Все эти даты очень хорошо стыкуются. Новые процессоры от Intel и AMD ожидают в конце этого года или в 2024-м. А на разработку новой версии ОС у Microsoft раньше уходило 2-3 года. Windows 11 была выпущена в октябре 2021-го. Так что, если новые утечки верны, следующую основную версию Windows можно ожидать в 2024 году — как раз под ряд новых процессоров. Как она будет выглядеть То, что Windows 12 точно находится в разработке, мы узнали и из утечек декабря 2022 года. Тогда во время мероприятия Ignite Keynote 2022 компания Microsoft (вполне возможно, намеренно) «засветила» интерфейс следующего большого обновления Windows. Потом об этом зудел весь интернет, споря о том, что это могло быть. Что, согласитесь, совсем неплохо для одного скриншота. Изображение, «случайно» показанное на Ignite Keynote, демонстрирует ряд нехарактерных для Windows 11 особенностей: плавающая (а не доходящая до краев экрана) панель задач; плавающее меню поиска; системные значки в верхней (а не привычной нижней) части экрана справа. И интересный виджет погоды слева вверху. Видно, что версия будет заметно отличаться от всех предыдущих. Коллективный разум сейчас считает, что она выйдет, скорее всего, в 2024 году, и будет называться Windows 12 как минимум из-за большого количества разных новшеств — так же, как это было с Windows 11. Скорее всего, так будет выглядеть следующая ОС Следующее крупное обновление Windows пока находится на стадии прототипа, но источники, знакомые с ситуацией, говорят, что показанный во время Ignite интерфейс отображает то, к чему стремится Microsoft в следующей версии своей операционной системы. На мероприятии показали только часть возможных новшеств — в реальности их будет больше. Например, ожидается, что в Windows 12 появится новый экран блокировки, новый центр уведомлений, новый поиск. Ну и ИИ везде, где только можно. В плане интерфейса глобальная цель — сделать его более удобным для сенсорного ввода. У Microsoft пока всё не очень хорошо с балансом по этой части: Windows 8 была чересчур сильно ориентированной именно на «тач-взаимодействие», а Windows 10, наоборот, заточена под работу с мышью и клавиатурой. В Windows 11 компания попыталась найти золотую середину, но не получилось: всё-таки удобство управления при помощи мыши однозначно осталось на первом месте. Туманная перспектива Облачная, точнее. Ходят не очень приятные слухи (впрочем, смотря с какой стороны посмотреть). Что, мол, Windows 12 может стать первой облачной ОС от Microsoft. В последние годы Сатья Наделла переносит всё в сеть, в том числе MS Office. И говорит, что за этим будущее, а «облако изменит всё». Microsoft 365 активно развивается, в том числе за счет Windows 365, облачного компьютера, который можно использовать на любом устройстве, способном поддерживать браузер. Сервис был запущен компанией в 2021 году, работать так можно как с Windows 10, так и с Windows 11. Компания позиционирует это как альтернативу облачным сервисам Google: теперь у неё в облаке тоже можно и хранить данные, и редактировать документы, и даже ходить по меню «Пуск» и папкам в привычном интерфейсе, даже если у вас стоит Ubuntu или вы вообще сидите с планшетом на Android. Если Windows 12 будет доступна только в виде такой облачной платформы (по крайней мере, изначально) — это может серьезно повысить видимость пакета 365 в глазах рядовых пользователей. А там, глядишь, многие и задумаются, не удобнее ли им так будет хранить данные, и продолжать работать в одной ОС с разных устройств. Система может быть во многом похожа на традиционные варианты виртуальных рабочих столов, которые уже много лет развертываются предприятиями для поддержки сценариев BYOD. Но с более простой структурой ценообразования, удобным запуском и ориентацией на более широкую аудиторию. Это также может стать более контролируемым способом для Microsoft проверить механизмы работы своих новых ИИ-помощников. При запуске облачной ОС им не придется отпускать ИИ «гулять» на каждый из компьютеров пользователей, все процедуры будут мониториться на собственных серверах. Будем надеяться, что это один из тех наборов слухов, которые скоро будут опровергнуты. Возможно, команда поэкспериментировала с этой идеей, и поняла, что она не приживается. Но пока что — нужно быть морально готовыми к тому, что со всё большим числом сервисов, в том числе от Microsoft, мы будем взаимодействовать через окно браузера. getmatch Рассказываем о том, как строить карьеру в IT Telegram Сайт ВКонтакте Twitter 160 Карма 198.6 Рейтинг @Arnak Пользователь P.S. Тысячи крутых вакансий в РФ и за рубежом — в телеграм-боте getmatch. Задаете нужную зарплату, и к вам приходят лучшие предложения, а наши эксперты помогают пройти интервью. Не нужно ни резюме, ни портфолио, настройка занимает меньше 30 секунд. А ещё это отличный способ следить за текущим рынком труда. Откликаться не обязательно. Теги:   windows , microsoft , windows 12 , AI , intel , chatgpt Хабы:   Блог компании getmatch , Разработка под Windows , Софт , Искусственный интеллект +11 8 32 Комментарии 32 Публикации ЛУЧШИЕ ЗА СУТКИ  ПОХОЖИЕ  ·   ·   ·   ·   ·   ·   ·   ·   ·   ·  ИНФОРМАЦИЯ Сайт getmatch.ru Дата регистрации 30 июля 2020 Численность 51–100 человек Местоположение Россия Ваш аккаунт Войти Регистрация Разделы Публикации Новости Хабы Компании Авторы Песочница Информация Устройство сайта Для авторов Для компаний Документы Соглашение Конфиденциальность Услуги Корпоративный блог Медийная реклама Нативные проекты Образовательные программы Стартапам Мегапроекты Настройка языка Техническая поддержка Вернуться на старую версию © 2006–2023, Habr "
